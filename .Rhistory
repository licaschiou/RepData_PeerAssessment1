testing <- spam[-inTrain,]
dim(training)
dim(testing)
set.seed(1234)
modelFit <- train(type ~., data=training, method="glm")
install.packages('e1071', dependencies=TRUE)
modelFit <- train(type ~., data=training, method="glm")
warnings()
modelFit <- train(type ~., data=training, method="glm")
modelFit
modelFit$finalModel
predictions <- predict(modelFit, newdata=testing)
predictions
confusionMatrix(predictons, testing$type)
confusionMatrix(predictions, testing$type)
head(testing)
head(spam)
?spam
install.packages("ISLR")
library(caret)
library(ISLR)
data(wage)
summary(wage)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7,list=FALSE)
trainingData <- Wage[inTrain,]
testingData <- Wage[-inTrain,]
dim(trainingData)
dim(testingData)
featurePlot(x=traning[,c("age","education","jobclass")],y=training$wage, plot="pairs")
featurePlot(x=traning[,c("age","education","jobclass")],y=trainingData$wage, plot="pairs")
featurePlot(x=traningData[,c("age","education","jobclass")],y=trainingData$wage, plot="pairs")
featurePlot(x=trainingData[,c("age","education","jobclass")],y=trainingData$wage, plot="pairs")
qplot(age,wage,data=trainingData)
qplot(age,wage,colour=jobclass,data=trainingData)
qplot(age,wage,colour=education,data=trainingData)
qq <- qplot(age,wage,colour=education,data=trainingData)
qq + geom_smooth(method='lm', formula=y~x)
install.packages("Hmisc")
library(Hmisc)
cutWage <- cut2(trainingData$wage, g = 3)
table(cutwage)
table(cutWage)
p1 <- qplot(cutWage,age,data=trainingData,fill=cutWage,geom=c("boxplot"))
p1
p1 <- qplot(cutWage,age,data=trainingData,fill=cutWage,geom=c("boxplot,gitter"))
p1 <- qplot(cutWage,age,data=trainingData,fill=cutWage,geom=c("boxplot,jitter"))
p1 <- qplot(cutWage,age,data=trainingData,fill=cutWage,geom=c("boxplot","jitter"))
p1 <- qplot(cutWage,age,data=trainingData,fill=cutWage,geom=c("boxplot"))
p2 <- qplot(cutWage,age,data=trainingData,fill=cutWage,geom=c("boxplot","jitter"))
grid.arragne(p1,p2,ncol=2)
grid.arrage(p1,p2,ncol=2)
p2
t1 <- table(cutWage,trainingData$jobclass)
t12
t1
library(ISLR)
library(caret)
data(Wage)
inTrain <- createDataPartition(y=Wage$wage, p = 0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass, data=training)
dummies
head(predict(dummies, newdata=training))
nsv <- nearZeroVar(traning, daveMetrics=TRUE)
nsv <- nearZeroVar(traning, saveMetrics=TRUE)
nsv <- nearZeroVar(training, saveMetrics=TRUE)
nsv
library(splines)
bsBasis <- bs(training$Wage, df= 3)
bsBasis <- bs(training$age, df= 3)
bsBasis
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75,list=FALSE)
training <- span{inTrain,}
training <- spam[inTrain,]
test<-spam[-inTrain,]
M <- abs(cor(training[,-58]))
M
diag(M) <- 0
which(M > 0.8, arr.ind=T)
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
plot(spam[,40],spam[,32])
plot(spam[,40],spam[,34])
plot(spam[,40],spam[,34])
plot(spam[,34],spam[,32])
x <- 0.71*training$num415 + 0.71*training$num857
y <- 0.71*training$num415 - 0.71*training$num857
plot(x,y)
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
prComp
plot(prComp$x[,1], prComp$x[,2])
plot(prComp$x[,1], prComp$x[,2])
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1], prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
prComp
preProc <- preProcess(log10(spam[,-58]+1), method="pca", pcsComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
preProc <- preProcess(log10(training[,-58]+1), method="pca", pcsComp=2)
trainPC <- predict(preProc, log10(training[,-58]+1))
modelFit <- train(training$type ~., method="glm", data=trainPC)
testPC <- predict(preProc, log10(testing[,-58]+1))
testing <- spam[-inTrain,]
testPC <- predict(preProc, log10(testing[,-58]+1))
confusionMatrix(testing$type, predict(modelFit, testPC))
modelFit <- train(training$type ~., method="glm", preProcess="pca", data=training)
confusionMatrix(testing$type, predict(modelFit, testPC))
confusionMatrix(testing$type, predict(modelFit, testing))
library(caret)
data(faithful)
set.seed(1234)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
qplot(waiting, eruptions, data = trainFaith)
g <- qplot(waiting, eruptions, data = trainFaith)
g
lm1 <- lm(eruptions ~ waiting, data = trainFaith)
summary(lm1)
g + geom_abline(lm1)
g + stat_smooth(method="lm")
g
g + stat_smooth(method="lm", se = FALSE)
g <- qplot(waiting, eruptions, data = trainFaith)
g
g + abline(intercept = coef(lm1)[1], slope=coef(lm1)[2])
coef(lm1)
coef(lm1)[1]
coef(lm1)[2]
g + geom_abline(intercept = coef(lm1)[1], slope=coef(lm1)[2])
newData <- data.frame(waiting=80)
predict(lm1, newData)
g + geom_abline(intercept = coef(lm1)[1], slope=coef(lm1)[2], colour = "blue", size=2)
gTest <- qplot(waiting, eruptions, data=testFaith, color="red", size = 2)
gTest
gTest + geom_abline(intercept = coef(lm1)[1], slope=coef(lm1)[2], colour = "blue", size=1)
g
g + geom_abline(intercept = coef(lm1)[1], slope=coef(lm1)[2], colour = "blue", size=2)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(g, gTest, ncol=2)
g <- g + geom_abline(intercept = coef(lm1)[1], slope=coef(lm1)[2], colour = "blue", size=2)
gTest <- gTest + geom_abline(intercept = coef(lm1)[1], slope=coef(lm1)[2], colour = "blue", size=1)
grid.arrange(g, gTest, ncol=2)
sqrt(sum((lm1$fitted - trainFaith$eruptions)^2))
sqrt(sum((predict(lm1, newdata=testFaith) - testFaith$eruptions)^2))
modFit <- train(eruptions ~ waiting, data=trainFaith, method="lm")
summary(modFit$finalModel)
summary(lm1)
library(ISRL)
library(IRSL)
library(ISLR)
library(ggplot2)
library(caret)
data(wage)
data(Wage)
Wage <- subset(Wage, select = -c(logwage))
inTrain <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
featurePlot(x = training[,c("age","education","jobclass")], y = training$wage, plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,data=training, colour=jobclass)
qplot(age,wage,data=training, colour=education)
modFit <- train(wage ~ age + jobclass + education, method="lm", data=training)
finMod <- modFit$finalModel
modFit
head(training)
class(training$education)
plot(finMod, 1, pch=19, cex=0.5, col="#00000010")
qplot(finMod$fitted, finMod$residuals, colour = race, data= training)
plot(fitMod$residuals, pch=19)
plot(finMod$residuals, pch=19)
pred <- predict(modFit, testing)
qplot(wage, pred, colour=year, data=testing)
library(slidify)
install.packages("rattle")
head(getS3method("mean","default"),10)
?sapply
set.seed(10)
x <- rnorm(100)
x <- as.ts(x)
plot(x)
x
library(methods)
setClass("polugon", representation(
x = "numeric",
y = "numeric"
))
setClass("polygon", representation(
x = "numeric",
y = "numeric"
))
setMethod("plot", "polygon",
function(x, y, ...){
plot(x@x, x@y, type = "n", ...)
xp <- c(x@x, x@x[1])
yp <- c(x@y, x@y[1])
lines(xp, yp)
}
)
showMethods("plot")
p <- new("polygon", x = c(1,2,3,4), y = c(1,2,4,1))
plot(p)
p <- new("polygon", x = c(1,2,3,4), y = c(1,2,3,1))
plot(p)
p <- new("polygon", x = c(1,2,3,4), y = c(1,2.5,3,1))
plot(p)
setMethod("plot", "polygon",
function(x, y, ...){
print(x, x@x, x@y)
plot(x@x, x@y, type = "n", ...)
xp <- c(x@x, x@x[1])
yp <- c(x@y, x@y[1])
lines(xp, yp)
}
)
plot(p)
setMethod("plot", "polygon",
function(x, y, ...){
print(x)
plot(x@x, x@y, type = "n", ...)
xp <- c(x@x, x@x[1])
yp <- c(x@y, x@y[1])
lines(xp, yp)
}
)
plot(p)
setMethod("plot", "polygon",
function(obj, y, ...){
print(obj)
plot(obj@x, obj@y, type = "n", ...)
xp <- c(obj@x, obj@x[1])
yp <- c(obj@y, obj@y[1])
lines(xp, yp)
}
)
setMethod("plot", "polygon",
function(x, y, ...){
print(x)
plot(x@x, x@y, type = "n", ...)
xp <- c(x@x, x@x[1])
yp <- c(x@y, x@y[1])
lines(xp, yp)
}
)
setMethod("plot", "polygon",
function(x, ...){
print(x)
plot(x@x, x@y, type = "n", ...)
xp <- c(x@x, x@x[1])
yp <- c(x@y, x@y[1])
lines(xp, yp)
}
)
plot(p)
plot(p)
setMethod("plot", "polygon",
function(obj, ...){
print(obj)
plot(obj@x, obj@y, type = "n", ...)
xp <- c(obj@x, obj@x[1])
yp <- c(obj@y, obj@y[1])
lines(xp, yp)
}
)
plot(p)
plot(p)
?setMethods
?setMethod
setMethod("plotPolygon", "polygon",
function(obj, ...){
print(x)
plot(x@x, x@y, type = "n", ...)
xp <- c(x@x, x@x[1])
yp <- c(x@y, x@y[1])
lines(xp, yp)
}
)
?setClass
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
class(vowel.test$y )
set.seed(33833)
?train
library(caret)
?train
rfFit <- train(y ~., data = vowel.train, method="rf", do.trace=TRUE)
rfFit
gbmFit <- train(y ~., data = vowel.train, method="gbm", do.trace=TRUE)
gbmFit
gbmFit <- train(y ~., data = vowel.train, method="gbm")
gbmFit
?confusionMatrix
predRf <- predict(rfFit, newdata = vowel.test)
predgbm <- predict(gbmFit, newdata = vowel.test)
confusionMatrix(vowel.test$y, predRf)
confusionMatrix(vowel.test$y, predgbm)
confusionMatrix(predRf, vowel.test$y)
confusionMatrix(predgbm, vowel.test$y)
confusionMatrix(predgbm, predRf)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
names(training)
set.seed(62433)
ldaFit2 <- train(diagnosis ~., data = training, method="lda", do.trace=TRUE)
ldaFit2 <- train(diagnosis ~., data = training, method="lda")
ldaFit2
gbmFit2 <- train(diagnosis ~., data = training, method="gbm")
gbmFit2
rfFit2 <- train(diagnosis ~., data = training, method="rf", do.trace=TRUE)
pred1 <- predict(rfFit2, testing)
pred2 <- predict(gbmFit2, testing)
pred3 <- predict(ldaFit2, testing)
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
head(predDF)
combFit <- train(diagnosis ~., method ="gam", data = predDF)
pred4 <- predict(combFit, testing)
confusionMatrix(pred4, testing$diagnosis)
combFit <- train(diagnosis ~., method ="rf", data = predDF)
combFit
pred4 <- predict(combFit, testing)
confusionMatrix(pred4, testing$diagnosis)
confusionMatrix(pred4, testing$diagnosis)$Accuracy
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(pred4, testing$diagnosis)
combFit <- train(diagnosis ~., method ="rf", trControl = trainControl(method="cv"), data = predDF)
predDF
pred4 <- predict(combFit, testing)
confusionMatrix(pred4, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred4, testing$diagnosis)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
pred1 <- predict(rfFit2, testing)
pred2 <- predict(gbmFit2, testing)
pred3 <- predict(ldaFit2, testing)
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
combFit <- train(diagnosis ~., method ="rf", data = predDF)
pred4 <- predict(combFit, testing)
confusionMatrix(pred4, testing$diagnosis)
showMethods(show)
getMethod(show)
install.packages("yhatr")
?colSums
?show
setwd("G:/Online Course/Data Science/reproducible research/RepData_PeerAssessment1")
```{r}
raw <- read.csv("./activity.csv")
stepsPerDay <- aggregate(raw$steps, list(date = raw$date), sum)
names(stepsPerDay) <- c("date", "totalSteps")
stepsPerDay
?colmeans
?colMeans
?mean
?median
meanTotal <- mean(stepsPerDay$totalSteps, na.rm = TRUE)
medianTotal <- median(stepsPerDay$totalSteps, na.rm = TRUE)
table(mean = meanTotal, median = medianTotal)
?table
table(c("mean", "median"), c(meanTotal, medianTotal))
table(statistic = c("mean", "median"), value=c(meanTotal, medianTotal))
data.frame(mean = meanTotal, median = medianTotal)
?data.frame
data.frame(mean = meanTotal, median = medianTotal, row.names = NULL)
str(raw)
?plot
plot(raw$interval, raw$steps,type="l")
timeInterval <- raw$interval
timeInterval <- as.factor(raw$interval)
levels(timeInterval)
stepsPerInterval <- aggregate(raw$steps, list(date = raw$interval), sum)
head(stepsPerInterval)
stepsPerInterval <- aggregate(raw$steps, list(interval = raw$interval), sum)
names(stepsPerInterval) <- c("interval", "totalSteps")
stepsPerInterval
?aggregate
str(raw)
stepsPerInterval <- aggregate(raw$steps, list(interval = raw$interval), sum, na.action = na.omit)
names(stepsPerInterval) <- c("interval", "totalSteps")
stepsPerInterval
stepsPerDay
str(raw)
stepsPerInterval <- aggregate(raw$steps, list(interval = as.factor(raw$interval)), sum, na.action = na.omit)
stepsPerInterval
?i
intervalFactor <- as.factor(raw$interval)
stepsPerInterval <- aggregate(raw$steps, list(interval = intervalFactor), sum)
stepsPerInterval
View(raw)
intervalFactor
intervalFactor <- levels(as.factor(raw$interval))
stepsPerInterval <- aggregate(raw$steps, list(interval = intervalFactor), sum)
intervalFactor <- as.factor(raw$interval)
stepsPerInterval <- aggregate(raw$steps, list(interval = intervalFactor), sum)
stepsPerInterval
stepsPerInterval <- aggregate(raw$steps, list(interval = intervalFactor), sum, na.action = na.omit)
stepsPerInterval
stepsPerInterval <- aggregate(raw$steps, list(interval = as.factor(raw$interval)), mean)
stepsPerInterval
timeInterval <- levels(as.factor(raw$interval))
timeInterval
library(plyr)
mutate(raw, intervalFactor = as.factor(interval))
raw2 <- mutate(raw, intervalFactor = as.factor(interval))
str(raw2)
meanStepsPerInterval <- aggregate(raw2$steps, list(interval = intervalFactor), mean)
meanStepsPerInterval
meanStepsPerInterval <- data.frame(interval = as.factor(interval), meanSteps = 0)
meanStepsPerInterval <- data.frame(interval = as.factor(raw$interval), meanSteps = 0)
meanStepsPerInterval
meanStepsPerInterval <- data.frame(interval = levels(as.factor(raw$interval)), meanSteps = 0)
meanStepsPerInterval
dim(raw)
nrows <- dim(raw)[1]
nrows <- dim(raw2)[1]
r
r
str(raw2)
raw2$intervalFactor[1]
raw2$intervalFactor[1] == 0
raw2$intervalFactor[1] == "0"
meanStepsPerInterval <- data.frame(interval = levels(as.factor(raw$interval)), totalSteps = 0, counts=0)
meanStepsPerInterval
head(raw2)
meanStepsPerInterval <- data.frame(interval = levels(as.factor(raw$interval)), totalSteps = 0, counts=0)
for (n in 1:nrows){
for (i in 1:288){
if(raw2$intervalFactor[n] == meanStepsPerInterval$interval[i]){
meanStepsPerInterval$totalSteps[i] <- meanStepsPerInterval$totalSteps[i] + raw2$steps[n]
meanStepsPerInterval$counts[i] <- meanStepsPerInterval$counts[i] + 1
}
}
}
meanStepsPerInterval
meanStepsPerInterval <- aggregate(raw$steps, list(interval = raw$interval), mean, na.action=na.omit)
meanStepsPerInterval
meanStepsPerInterval <- aggregate(raw$steps, list(interval = raw$interval), sum, na.action=na.omit)
meanStepsPerInterval
stepsPerDay
head(raw)
meanStepsPerInterval <- aggregate(raw$steps, list(interval = raw$interval), sum)
meanStepsPerInterval
meanStepsPerInterval <- aggregate(raw$steps, list(interval = raw$date), sum)
meanStepsPerInterval
?count
count(raw, vars = "interval")
aggregate(steps ~ interval, data = raw, sum)
aggregate(steps ~ interval, data = raw, mean)
meanStepsPerInterval <- aggregate(steps ~ interval, data = raw, mean)
plot(meanStepsPerInterval$interval, meanStepsPerInterval$steps, type = "l")
str(meanStepsPerInterval)
qplot(interval, steps, data = meanStepsPerInterval, geom="line")
library(ggplot2)
qplot(interval, steps, data = meanStepsPerInterval, geom="line")
qplot(date, steps, data = raw)
?which.max
which.max(meanStepsPerInterval$steps)
meanStepsPerInterval$interval[which.max(meanStepsPerInterval$steps)]
qplot(interval, steps, data = meanStepsPerInterval, geom="line") + + geom_vline(xintercept = maxStepsInterval)
maxStepsInterval <- meanStepsPerInterval$interval[which.max(meanStepsPerInterval$steps)]
qplot(interval, steps, data = meanStepsPerInterval, geom="line") + + geom_vline(xintercept = maxStepsInterval)
g <- ggplot(aes(x = interval, y = steps), data = meanStepsPerInterval)
g + geom_line() + geom_vline(xintercept = maxStepsInterval)
g + geom_line() + geom_vline(xintercept = maxStepsInterval, aes(colour = red))
g + geom_line() + geom_vline(xintercept = maxStepsInterval, aes(colour = "red"))
g + geom_line() + geom_vline(xintercept = maxStepsInterval, colour = "red")
g + geom_line() + geom_vline(xintercept = maxStepsInterval, colour = "red") + geom_text(data = NULL, x = 5, y = 30, label = maxStepsInterval)
g + geom_line() + geom_vline(xintercept = maxStepsInterval, colour = "red") + geom_text(data = NULL, x = 30, y = 30, label = maxStepsInterval)
g + geom_line() + geom_vline(xintercept = maxStepsInterval, colour = "red") + geom_text(data = NULL, x = 200, y = 30, label = maxStepsInterval)
g + geom_line() + geom_vline(xintercept = maxStepsInterval, colour = "red") + geom_text(data = NULL, x = 835, y = 30, label = maxStepsInterval)
g + geom_line() + geom_vline(xintercept = maxStepsInterval, colour = "red") + geom_text(data = NULL, x = 835, y = 0, label = maxStepsInterval)
g + geom_line() + geom_vline(xintercept = maxStepsInterval, colour = "red") + geom_text(data = NULL, x = 835, y = -50, label = maxStepsInterval)
g + geom_line() + geom_vline(xintercept = maxStepsInterval, colour = "red") + geom_text(data = NULL, x = 835, y = -20, label = maxStepsInterval)
g + geom_line() + geom_vline(xintercept = maxStepsInterval, colour = "red") + geom_text(data = NULL, x = 835, y = 0, label = maxStepsInterval)
g + geom_line() + geom_vline(xintercept = maxStepsInterval, colour = "red") + geom_text(data = NULL, x = 835, y = 0, size = 8, colour = "red", label = maxStepsInterval)
g + geom_line() + geom_vline(xintercept = maxStepsInterval, colour = "red") + geom_text(data = NULL, x = 835, y = 0, size = 6, colour = "red", label = maxStepsInterval)
g + geom_line() + geom_vline(xintercept = maxStepsInterval, colour = "red") + geom_text(data = NULL, x = 855, y = 0, size = 4, colour = "red", label = maxStepsInterval)
g + geom_line() + geom_vline(xintercept = maxStepsInterval, colour = "red") + geom_text(data = NULL, x = 875, y = 0, size = 4, colour = "red", label = maxStepsInterval)
g + geom_line() + geom_vline(xintercept = maxStepsInterval, colour = "red") + geom_text(data = NULL, x = 885, y = 0, size = 4, colour = "red", label = maxStepsInterval)
